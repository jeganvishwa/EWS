var I2vSdk = function() {
    function e() {
        this.playerIp = "10.9.76.13", this.useSecureConnection = !1
    }
    return e.prototype.InitPlayer = function(e, t, r, i, n, o) {
        n && (this.playerIp = n), o && (this.useSecureConnection = o);
        var a = "ws",
            s = 8181;
        this.useSecureConnection && (a = "wss", s = 8182);
        var l = new WebSocket(a + "://" + this.playerIp + ":" + s + "?serverIp~~" + e);
        l.onmessage = function(e) {
            "Ok" == e.data || "Init" == e.data ? r() : (i(e.data), console.error(e.data)), l.close()
        }, l.onerror = function(e) {
            var t = "Not able to connect to player.";
            console.error(t), i(t), l.close()
        }
    }, e.prototype.GetPlayer = function(e, t, r, i, n, o, a) {
        var s = new I2vPlayer(e, t, r, i, n, o, a, this.useSecureConnection);
        return s.playerIp = this.playerIp, s
    }, e
}(),
I2vPlayer = function() {
    function e(e, t, r, i, n, o, a, s) {
        this.useSecureConnection = !1, this.elId = e, this.cameraId = t, this.mode = r, this.streamtype = i, this.useT = n, this.urlCreator = window.URL || window.webkitURL, this.startTime = a, this.ctrlInputRate = o, this.useSecureConnection = s
    }
    return e.prototype.setErrorCallback = function(e) {
        this.errorCallback = e
    }, e.prototype.setRetryingCallback = function(e) {
        this.retryingCallback = e
    }, e.prototype.stop = function() {
        if (this.w.close(), delete this.m, delete this.v, this.isJpeg) {
            var e = document.getElementById(this.elId + "_img");
            e && (e.src = "", e.parentNode.removeChild(e))
        } else {
            var t = document.getElementById(this.elId + "_video");
            t && (t.src = "", t.parentNode.removeChild(t))
        }
    }, e.prototype.initializeMediaSource = function() {
        var n = this;
        this.m = new MediaSource;
        var t = 'video/mp4; codecs="avc1.4D0020"';
        MediaSource.isTypeSupported(t) && (this.m.addEventListener("error", function(e) {
            console.log("error: " + n.m.readyState)
        }), this.m.addEventListener("sourceopen", function(e) {
            console.log("sourceopen: " + n.m.readyState);
            try {
                n.v.play()
            } catch (e) {
                e
            }
            n.b = n.m.addSourceBuffer(t), n.b.mode = "sequence", n.b.addEventListener("updateend", function(e) {
                if (!n.b.updating && (n.lastSegment && (n.b.appendBuffer(n.lastSegment), n.lastSegment = null), n.b.buffered.length)) {
                    var t = n.v.currentTime,
                        r = n.b.buffered.start(0),
                        i = n.b.buffered.end(0);
                    20 < t - r && t < i && !n.b.updating && n.b.remove(r, t - 4)
                }
            }), !n.b.updating && "open" === n.m.readyState && n.intS && n.b.appendBuffer(n.intS), n.isSourceReady = !0
        }, !1))
    }, e.prototype._arrayBufferToBase64 = function(e) {
        for (var t = "", r = new Uint8Array(e), i = r.byteLength, n = 0; n < i; n++) t += String.fromCharCode(r[n]);
        return window.btoa(t)
    }, e.prototype.play = function() {
        var i = this,
            e = "ws",
            t = 8181;
        this.useSecureConnection && (e = "wss", t = 8182), this.initializeMediaSource(), this.w = new WebSocket(e + "://" + this.playerIp + ":" + t + "?cameraId~~" + this.cameraId + "&&id~~" + this.elId + "&&useTranscoding~~" + this.useT + "&&startTime~~" + this.startTime + "&&mode~~" + this.mode + "&&streamtype~~" + this.streamtype + "&&ctrlInputRate~~" + this.ctrlInputRate), this.w.binaryType = "arraybuffer", this.w.addEventListener("open", function(e) {
            i.w.send("Hello Server!")
        }), this.w.addEventListener("close", function(e) {
            console.log("socket closed")
        }), this.w.addEventListener("message", function(e) {
            switch (e.data) {
                case "Init":
                    var t = "Player is not initialized. Please call InitPlayer() first!!";
                    return i.errorCallback && i.errorCallback(t), void console.error(t);
                case "EmptyUrl":
                    t = "EmptyUrl";
                    return i.errorCallback && i.errorCallback(t), void console.error(t);
                case "retrying":
                    return i.retryingCallback && i.retryingCallback(), void console.log("Disconnected, trying to reconnect!!");
                case "License Expired":
                    t = "License Expired/Invalid";
                    return i.errorCallback && i.errorCallback(t), void console.error(t);
                case "Some problem occured":
                    t = "Some problem in getting playable url";
                    return i.errorCallback && i.errorCallback(t), void console.error(t)
            }
            if (!i.isPlayerSet) return e.data instanceof ArrayBuffer ? void 0 : ("mp4" === e.data ? (i.v = document.createElement("video"), document.getElementById(i.elId).appendChild(i.v), i.v.id = i.elId + "_video", i.v.src = window.URL.createObjectURL(i.m), i.v.style.height = "100%", i.v.style.width = "100%", i.v.style.display = "inline", i.isJpeg = !1, i.intS = null) : "mjpeg" === e.data && (i.i = document.createElement("img"), document.getElementById(i.elId).appendChild(i.i), i.i.id = i.elId + "_img", i.i.style.height = "100%", i.i.style.width = "100%", i.i.style.display = "inline", i.isJpeg = !0, i.i.setAttribute("src", "http://" + i.playerIp + ":4554/" + i.elId)), void(i.isPlayerSet = !0));
            if (!i.isJpeg) {
                var r = new Uint8Array(e.data);
                if (i.intS || (i.intS = r), !i.isSourceReady) return;
                if (i.b.buffered.length) .5 < i.b.buffered.end(0) - i.v.currentTime && (i.v.currentTime = i.b.buffered.end(0) - .5);
                if (i.lastSegment = r, !i.b.updating && "open" === i.m.readyState) {
                    try {
                        i.b.appendBuffer(i.lastSegment)
                    } catch (e) {
                        i.isSourceReady = !1, i.initializeMediaSource(), i.v.src = null, i.v.src = window.URL.createObjectURL(i.m)
                    }
                    i.lastSegment = null
                }
            }
        }, !1)
    }, e
}();